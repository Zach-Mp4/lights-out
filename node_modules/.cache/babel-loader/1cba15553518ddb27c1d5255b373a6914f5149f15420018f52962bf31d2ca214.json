{"ast":null,"code":"var _jsxFileName = \"/Users/zach/springboard/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 3,\n  ncols = 3,\n  chanceLightStartsOn = 25.0\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      //create a new row\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        //create a random num to determine if the light starts on\n        const rand = Math.random() * 100;\n        const isLit = rand < chanceLightStartsOn;\n        row.push(isLit);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let row = 0; row < nrows; row++) {\n      for (let col = 0; col < ncols; col++) {\n        if (board[row][col]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const newBoard = oldBoard.map(row => [...row]);\n      const flipCell = (y, x, boardCopy) => {\n        console.log(\"x:\", x, \"y:\", y, \"ncols:\", ncols, \"nrows:\", nrows);\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x);\n      flipCell(y - 1, x); // Up\n      flipCell(y + 1, x); // Down\n      flipCell(y, x - 1); // Left\n      flipCell(y, x + 1); // Right\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Congratulations! You've won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n\n  // make table board\n  const tableBoard = [];\n  for (let row = 0; row < nrows; row++) {\n    let cells = [];\n    for (let col = 0; col < ncols; col++) {\n      const coord = `${row}-${col}`;\n      cells.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[row][col],\n        flipCellsAround: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this));\n    }\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: cells\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }, this));\n  }\n\n  // Return the rendered board\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tableBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","rand","Math","random","isLit","push","hasWon","col","flipCellsAround","coord","oldBoard","y","x","split","map","Number","newBoard","flipCell","boardCopy","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","tableBoard","cells","className","_c","$RefreshReg$"],"sources":["/Users/zach/springboard/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 3, ncols = 3, chanceLightStartsOn = 25.0}) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++){\n      //create a new row\n      let row = [];\n      for (let j = 0; j < ncols; j++){\n        //create a random num to determine if the light starts on\n        const rand = Math.random() * 100;\n        const isLit = rand < chanceLightStartsOn;\n        row.push(isLit);\n      }\n      initialBoard.push(row);\n    }\n    \n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let row = 0; row < nrows; row++){\n      for (let col = 0; col < ncols; col++){\n        if (board[row][col]){\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const newBoard = oldBoard.map(row => [...row]);\n\n      const flipCell = (y, x, boardCopy) => {\n        console.log(\"x:\", x, \"y:\", y, \"ncols:\", ncols, \"nrows:\", nrows);\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x);\n\n      flipCell(y - 1, x); // Up\n      flipCell(y + 1, x); // Down\n      flipCell(y, x - 1); // Left\n      flipCell(y, x + 1); // Right\n\n      // TODO: return the copy\n      return newBoard;\n\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>Congratulations! You've won!</div>;\n  }\n\n  // make table board\n  const tableBoard = [];\n  for (let row = 0; row < nrows; row++) {\n    let cells = [];\n    for (let col = 0; col < ncols; col++) {\n      const coord = `${row}-${col}`;\n      cells.push(\n        <Cell\n          key={coord}\n          isLit={board[row][col]}\n          flipCellsAround={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tableBoard.push(<tr key={row}>{cells}</tr>);\n  }\n\n  // Return the rendered board\n  return (\n    <table className=\"Board\">\n      <tbody>{tableBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}